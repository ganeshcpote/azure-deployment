pipeline {
  agent any

  parameters {
        string(name: 'run_id', defaultValue: 'test1', description: 'Please specify run_id')
		choice(name: 'blueprint_name', choices: ['linuxservers', 'windowsservers'], description: 'Provide blueprint name for provisioning' )
		string(name: 'user_email', defaultValue: 'ganesh.pote@ril.com', description: 'Provide user email Id for notification') 
    }
  stages {
    stage('Terraform Init') {
      steps {
	dir("blueprints/${blueprint_name}") {  
		sh "terraform init -backend-config=\"conn_str=postgres://jenkins:jenkins@localhost/terraformstate?sslmode=disable\" -input=false"
		sh "terraform workspace new blueprint_provisioning_${BUILD_ID}_state"
		sh "terraform workspace select  blueprint_provisioning_${BUILD_ID}_state"
		sh "terraform workspace show"
		sh "terraform state pull"
	  }
       }
    }
    stage('Terraform Plan') {
      steps {
		dir("blueprints/${blueprint_name}") {   
			sh "terraform plan -out=tfplan"
			sh "terraform show -no-color tfplan > ${BUILD_ID}_tfplan.txt"
		}
      }
    }
   stage('Terraform Apply') {
      steps {
		dir("blueprints/${blueprint_name}") {   
			sh "terraform apply -input=false -auto-approve tfplan"
			sh "terraform output"
			sh "echo ***********************************"
			sh "echo state information"
			sh "echo ***********************************"
			sh "terraform show -json"
			sh "echo ***********************************"

			script{
				vm_ids = sh(returnStdout: true, script: 'terraform output -raw vm_ids').trim()
				network_interface_ids = sh(returnStdout: true, script: 'terraform output -raw network_interface_ids').trim()
				network_interface_private_ip = sh(returnStdout: true, script: 'terraform output -raw network_interface_private_ip').trim()
				availability_set_id = sh(returnStdout: true, script: 'terraform output -raw availability_set_id').trim()
			}
		}
      }
    }
  stage('Send Email') {
      steps {
		script{
			html_body = "Dear User, <br/><br/>" 
			html_body = html_body + "Your request number <b> ${BUILD_ID} </b> has been approved and completed.<br/><br/>"
			html_body = html_body + "Below are the provisioning details for your reference : <br/><br/>"
			html_body = html_body + "<table>"
			html_body = html_body + "<tr><td>Deployment ID:</td><td>${BUILD_ID}</td></tr>"
			html_body = html_body + "<tr><td>Cloud Provider:</td><td>Azure</td></tr>"
			html_body = html_body + "<tr><td>VM Ids:</td><td>${vm_ids}</td></tr>"
			html_body = html_body + "<tr><td>Network Interface Ids:</td><td>${network_interface_ids}</td></tr>"
			html_body = html_body + "<tr><td>Network Interface Private IP:</td><td>${network_interface_private_ip}</td></tr>"
			html_body = html_body + "<tr><td>Availability Set Id:</td><td>${availability_set_id}</td></tr>"
			html_body = html_body + "</table>"
			html_body = html_body + "<br/><br/>Thanks, </br>Cloud Deployment Team"
		}
			mail	to: "${user_email}", 
			from: 'jenkins@example.com',
			mimeType: 'text/html',
			subject: "Your Azure Cloud deployment request number \"${BUILD_ID}\" Status - Completed", 
			body: html_body
		  }
  }
  stage('Terraform Destroy Approval') {
	   steps {
		   dir("blueprints/${blueprint_name}") {  
            script {
                def plan = readFile "${BUILD_ID}_tfplan.txt"
                input message: "Do you want to destroy the plan?",
                    parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
            }
		   }
        }
    }
  stage('Terraform Destroy') {
      steps {
		dir("blueprints/${blueprint_name}") {   
			sh "terraform workspace select blueprint_provisioning_${BUILD_ID}_state"
			sh "terraform destroy -input=false -auto-approve"
		}
      }
    }
  }
  post {
        always {
			dir("blueprints/${blueprint_name}") { 
				archiveArtifacts artifacts: "${BUILD_ID}_tfplan.txt"
				cleanWs()
			}
        }
    }
}
