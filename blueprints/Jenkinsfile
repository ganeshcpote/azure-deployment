pipeline {
  agent any

  parameters {
        string(name: 'deployment_id', defaultValue: 'test1', description: 'Please specify deployment id (UUID)')
		choice(name: 'blueprint_name', choices: ['centosserver', 'coreosserver', 'debianserver', 'opensuseserver', 'suseserver', 'ubuntuserver', 'win2016server', 'win2021server', 'ubuntuapache2server'], description: 'Provide blueprint name for provisioning' )
		booleanParam(name: 'application_blueprint', defaultValue: 'false', description: 'Please specify if this is application blueprint')
		string(name: 'resource_group_name', defaultValue: 'CMP', description: 'Please Azure Resource Group Name')
		string(name: 'vm_hostname', defaultValue: 'mycentonserver', description: 'Please host name for VM')
		string(name: 'vm_size', defaultValue: 'Standard_DS1_V2', description: 'Please size of VM')
		string(name: 'azure_subscription_id', defaultValue: 'e24e76dc-df5a-4add-b57b-6aa3f0eae0ee', description: 'Please specify Azure Subscription ID')
		string(name: 'azure_client_id', defaultValue: '49dc5041-2873-4ee7-9a05-33723de63dbf', description: 'Please specify Azure Client ID')
		string(name: 'azure_client_secret', defaultValue: 'VdgxkF~M3-Kl004gGOdc1SS7a-q4kC.Lkh', description: 'Please specify Azure Client secret')
		string(name: 'azure_tenant_id', defaultValue: '98f13429-d038-4e5e-85d8-846c6a963288', description: 'Please specify Azure Tenant ID')
		string(name: 'location', defaultValue: 'westus2', description: 'Please specify Azure location')
		string(name: 'nb_instances', defaultValue: '1', description: 'Please specify no. of instance to be deployed on Cloud')
		string(name: 'vnet_subnet_id', defaultValue: '/subscriptions/e24e76dc-df5a-4add-b57b-6aa3f0eae0ee/resourceGroups/CMP/providers/Microsoft.Network/virtualNetworks/CMP-vnet/subnets/default', description: 'Please specify Azure Subnet ID')
		booleanParam(name: 'data_disk', defaultValue: 'true', description: 'Please specify if you wish to add additonal persistent storage')
		string(name: 'data_disk_size_gb', defaultValue: '64', description: 'Please specify additonal persistent storage size in GB')
		string(name: 'tags', defaultValue: '{"environment":"dev","costcenter":"it"}', description: 'Please specify tags to apply to resources')
		string(name: 'user_email', defaultValue: 'ganesh.pote@ril.com', description: 'Provide user email Id for notification') 
		booleanParam(name: 'hcmp_run', defaultValue: 'false', description: 'Please specify if this is test run')
    }
  stages {
	stage('Terraform Preparation') {
      steps {
	dir("blueprints/${blueprint_name}") {  
		replace_variable("resource_group_name", "${resource_group_name}")
		replace_variable("azure_subscription_id", "${azure_subscription_id}")
		replace_variable("azure_client_id", "${azure_client_id}")
		replace_variable("azure_client_secret", "${azure_client_secret}")
		replace_variable("azure_tenant_id", "${azure_tenant_id}")
		replace_variable("location", "${location}")
		replace_variable("nb_instances", "${nb_instances}")
		replace_variable("vnet_subnet_id", "${vnet_subnet_id}")
		replace_variable("data_disk", "${data_disk}")
		replace_variable("data_disk_size_gb", "${data_disk_size_gb}")
		replace_variable("vm_hostname", "${vm_hostname}")
		replace_variable("application_blueprint", "${application_blueprint}")
		replace_variable("vm_size", "${vm_size}")
		replace_tags("${tags}")
		sh "cat main.tf"
	  }
       }
    }
    stage('Terraform Init') {
      steps {
	dir("blueprints/${blueprint_name}") {  
		sh "terraform init -backend-config=\"conn_str=postgres://jenkins:jenkins@localhost/terraformstate?sslmode=disable\" -input=false"
		sh "terraform workspace new blueprint_provisioning_${BUILD_ID}_state"
		sh "terraform workspace select  blueprint_provisioning_${BUILD_ID}_state"
		sh "terraform workspace show"
		sh "terraform state pull"
	  }
       }
    }
    stage('Terraform Plan') {
      steps {
		dir("blueprints/${blueprint_name}") {   
			sh "terraform plan -out=tfplan"
			sh "terraform show -no-color tfplan > ${BUILD_ID}_tfplan.txt"
		}
      }
    }
   stage('Terraform Apply') {
      when {
		expression {
			return params.hcmp_run
		}
      }
      steps {
		dir("blueprints/${blueprint_name}") {   
			sh "terraform apply -input=false -auto-approve tfplan"
			sh "terraform output"
			sh "echo ***********************************"
			sh "echo state information"
			sh "echo ***********************************"
			sh "terraform show -json"
			sh "echo ***********************************"

			script{
				vm_ids = sh(returnStdout: true, script: 'terraform output -raw vm_ids').trim()
				network_interface_ids = sh(returnStdout: true, script: 'terraform output -raw network_interface_ids').trim()
				network_interface_private_ip = sh(returnStdout: true, script: 'terraform output -raw network_interface_private_ip').trim()
				availability_set_id = sh(returnStdout: true, script: 'terraform output -raw availability_set_id').trim()
			}
		}
      }
    }
  stage('Send Email') {
	  when {
		expression {
			return params.hcmp_run
		}
      }
      steps {
		script{
			html_body = "Dear User, <br/><br/>" 
			html_body = html_body + "Your request number <b> ${BUILD_ID} </b> has been approved and completed.<br/><br/>"
			html_body = html_body + "Below are the provisioning details for your reference : <br/><br/>"
			html_body = html_body + "<table>"
			html_body = html_body + "<tr><td>Deployment ID:</td><td>${BUILD_ID}</td></tr>"
			html_body = html_body + "<tr><td>Cloud Provider:</td><td>Azure</td></tr>"
			html_body = html_body + "<tr><td>VM Ids:</td><td>${vm_ids}</td></tr>"
			html_body = html_body + "<tr><td>Network Interface Ids:</td><td>${network_interface_ids}</td></tr>"
			html_body = html_body + "<tr><td>Network Interface Private IP:</td><td>${network_interface_private_ip}</td></tr>"
			html_body = html_body + "<tr><td>Availability Set Id:</td><td>${availability_set_id}</td></tr>"
			html_body = html_body + "</table>"
			html_body = html_body + "<br/><br/>Thanks, </br>Cloud Deployment Team"
		}
			mail	to: "${user_email}", 
			from: 'jenkins@example.com',
			mimeType: 'text/html',
			subject: "Your Azure Cloud deployment request number \"${BUILD_ID}\" Status - Completed", 
			body: html_body
		  }
  }
  stage('Terraform Destroy Approval') {
	   when {
		expression {
			return params.hcmp_run
		}
      }
	   steps {
		   dir("blueprints/${blueprint_name}") {  
            script {
                def plan = readFile "${BUILD_ID}_tfplan.txt"
                input message: "Do you want to destroy the plan?",
                    parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
            }
		   }
        }
    }
  stage('Terraform Destroy') {
      when {
		expression {
			return params.hcmp_run
		}
      }
      steps {
		dir("blueprints/${blueprint_name}") {   
			sh "terraform workspace select blueprint_provisioning_${BUILD_ID}_state"
			sh "terraform destroy -input=false -auto-approve"
		}
      }
    }
  }
  post {
        always {
			dir("blueprints/${blueprint_name}") { 
				archiveArtifacts artifacts: "${BUILD_ID}_tfplan.txt"
				//cleanWs()
			}
        }
    }
}

def replace_variable(String oldText, String newText) {
	def text = readFile file: "main.tf"
	text = text.replaceAll("%${oldText}%", "${newText}")
	writeFile file: "main.tf", text: text
}


def replace_tags(txt){
	println txt
	def lazyMap = new groovy.json.JsonSlurper().parseText(txt)
	def map = [:]
	for ( prop in lazyMap ) {
    	map[prop.key] = '"' + prop.value + '"'
	}
	println map
	println map.toString()
	def tf_tags = "{"
	for(element in map) {
		tf_tags = tf_tags + element.toString()
	}
	tf_tags = "}"
	println tf_tags
	def text = readFile file: "main.tf"
	text = text.replaceAll("%${tags}%", tf_tags)
	writeFile file: "main.tf", text: text
}