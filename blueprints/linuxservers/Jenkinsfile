pipeline {
  agent any

  parameters {
        string(name: 'run_id', defaultValue: 'test1', description: 'Please specify run_id')
	string(name: 'blueprint_name', defaultValue: 'linuxservers', description: 'Provide blueprint name for provisioning') 
	string(name: 'user_email', defaultValue: 'ganesh.pote@ril.com', description: 'Provide user email Id for notification') 
    }
  stages {
    stage('Terraform Init') {
      steps {
	dir('blueprints/linuxservers') {  
		sh "terraform init -backend-config=\"conn_str=postgres://jenkins:jenkins@localhost/terraformstate?sslmode=disable\" -input=false"
		sh "terraform workspace new blueprint_provisioning_${BUILD_ID}_state"
		sh "terraform workspace select  blueprint_provisioning_${BUILD_ID}_state"
		sh "terraform workspace show"
		sh "terraform state pull"
	  }
       }
    }
    stage('Terraform Plan') {
      steps {
		dir('blueprints/linuxservers') {   
			sh "terraform plan -out=tfplan"
			sh "terraform show -no-color tfplan > ${BUILD_ID}_tfplan.txt"
		}
      }
    }
   stage('Terraform Apply') {
      steps {
		dir('blueprints/linuxservers') {   
			sh "terraform apply -input=false -auto-approve tfplan"
			sh "terraform output"
			sh "echo ***********************************"
			sh "echo state information"
			sh "echo ***********************************"
			sh "terraform show -json"
			sh "echo ***********************************"

			script{
				vnet_id = sh(returnStdout: true, script: 'terraform output -raw vnet_id').trim()
				subnet_id = sh(returnStdout: true, script: 'terraform output -raw subnet_id').trim()
				virtual_network_name = sh(returnStdout: true, script: 'terraform output -raw virtual_network_name').trim()
				private_ip_address = sh(returnStdout: true, script: 'terraform output -raw private_ip_address').trim()
				security_group_id = sh(returnStdout: true, script: 'terraform output -raw security_group_id').trim()
				security_group_name = sh(returnStdout: true, script: 'terraform output -raw security_group_name').trim()
				resource_group_name = sh(returnStdout: true, script: 'terraform output -raw resource_group_name').trim()
				public_ip_address = sh(returnStdout: true, script: 'terraform output -raw public_ip_address').trim()
				vm_size = sh(returnStdout: true, script: 'terraform output -raw vm_size').trim()
				vm_location = sh(returnStdout: true, script: 'terraform output -raw vm_location').trim()
				vm_id = sh(returnStdout: true, script: 'terraform output -raw vm_id').trim()
				application_url = sh(returnStdout: true, script: 'terraform output -raw application_url').trim()
			}
		}
      }
    }
  stage('Send Email') {
      steps {
		script{
			html_body = "Dear User, <br/><br/>" 
			html_body = html_body + "Your request number <b> ${BUILD_ID} </b> has been approved and completed.<br/><br/>"
			html_body = html_body + "Below are the provisioning details for your reference : <br/><br/>"
			html_body = html_body + "<table>"
			html_body = html_body + "<tr><td>Deployment ID:</td><td>${BUILD_ID}</td></tr>"
			html_body = html_body + "<tr><td>Cloud Provider:</td><td>Azure</td></tr>"
			html_body = html_body + "<tr><td>VNET ID:</td><td>${vnet_id}</td></tr>"
			html_body = html_body + "<tr><td>Application Url:</td><td>${application_url}</td></tr>"
			html_body = html_body + "<tr><td>Subnet ID:</td><td>${subnet_id}</td></tr>"
			html_body = html_body + "<tr><td>Vitual Network Name :</td><td>${virtual_network_name}</td></tr>"
			html_body = html_body + "<tr><td>Private IP:</td><td>${private_ip_address}</td></tr>"
			html_body = html_body + "<tr><td>Security Group ID:</td><td>${security_group_id}</td></tr>"
			html_body = html_body + "<tr><td>Security Group Name:</td><td>${security_group_name}</td></tr>"
			html_body = html_body + "<tr><td>Resource Group Name:</td><td>${resource_group_name}</td></tr>"			
			html_body = html_body + "<tr><td>Public IP:</td><td>${public_ip_address}</td></tr>"
			html_body = html_body + "<tr><td>VM Size:</td><td>${vm_size}</td></tr>"		
			html_body = html_body + "<tr><td>VM Location:</td><td>${vm_location}</td></tr>"		
			html_body = html_body + "<tr><td>VM Instance ID:</td><td>${vm_id}</td></tr>"
			html_body = html_body + "</table>"
			html_body = html_body + "<br/><br/>Thanks, </br>Cloud Deployment Team"
		}
			mail	to: "${user_email}", 
			from: 'jenkins@example.com',
			mimeType: 'text/html',
			subject: "Your Azure Cloud deployment request number \"${BUILD_ID}\" Status - Completed", 
			body: html_body
		  }
  }
  stage('Terraform Destroy Approval') {
	   steps {
		   dir('blueprints/linuxservers') {  
            script {
                def plan = readFile "${BUILD_ID}_tfplan.txt"
                input message: "Do you want to destroy the plan?",
                    parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
            }
		   }
        }
    }
  stage('Terraform Destroy') {
      steps {
		dir('blueprints/linuxservers') {   
			sh "terraform workspace select blueprint_provisioning_${BUILD_ID}_state"
			sh "terraform destroy -input=false -auto-approve"
		}
      }
    }
  }
  post {
        always {
			dir('blueprints/linuxservers') { 
				archiveArtifacts artifacts: "${BUILD_ID}_tfplan.txt"
				cleanWs()
			}
        }
    }
}
